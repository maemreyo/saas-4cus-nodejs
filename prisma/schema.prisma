generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum AuthProviderType {
  LOCAL
  GOOGLE
  GITHUB
  FACEBOOK
  TWITTER
}

enum TokenType {
  ACCESS
  REFRESH
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
  PAUSED
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
  FAILED
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum TenantMemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// Models
model User {
  id       String  @id @default(cuid())
  email    String  @unique @db.VarChar(255)
  username String? @unique @db.VarChar(50)
  password String? @db.VarChar(255)

  firstName   String? @db.VarChar(100)
  lastName    String? @db.VarChar(100)
  displayName String? @db.VarChar(100)
  avatar      String? @db.Text
  bio         String? @db.Text

  role   UserRole   @default(USER)
  status UserStatus @default(ACTIVE)

  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?

  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String? @db.VarChar(255)

  lastLoginAt DateTime?
  lastLoginIp String?   @db.VarChar(45)
  loginCount  Int       @default(0)

  metadata    Json? @db.JsonB
  preferences Json? @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  authProviders AuthProvider[]
  tokens        Token[]
  sessions      Session[]
  notifications Notification[]
  auditLogs     AuditLog[]
  files         File[]
  subscriptions Subscription[]
  projects      Project[]
  apiUsage      ApiUsage[]
  tenantMembers TenantMember[]
  ownedTenants  Tenant[]

  // Ticket
  tickets           Ticket[]           @relation("UserTickets")
  assignedTickets   Ticket[]           @relation("AssignedTickets")
  ticketMessages    TicketMessage[]
  ticketAttachments TicketAttachment[]
  ticketHistory     TicketHistory[]
  watchedTickets    TicketWatcher[]

  // Indexes
  @@index([email])
  @@index([username])
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

model AuthProvider {
  id            String           @id @default(cuid())
  userId        String
  provider      AuthProviderType
  providerId    String           @db.VarChar(255)
  providerEmail String?          @db.VarChar(255)
  accessToken   String?          @db.Text
  refreshToken  String?          @db.Text
  expiresAt     DateTime?
  metadata      Json?            @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([provider, providerId])
  @@index([userId])
  @@map("auth_providers")
}

model Token {
  id        String    @id @default(cuid())
  userId    String?
  type      TokenType
  token     String    @unique @db.VarChar(500)
  expiresAt DateTime
  usedAt    DateTime?
  metadata  Json?     @db.JsonB

  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([token])
  @@index([userId, type])
  @@index([expiresAt])
  @@map("tokens")
}

model Session {
  id     String @id @default(cuid())
  userId String
  token  String @unique @db.VarChar(500)

  ipAddress String? @db.VarChar(45)
  userAgent String? @db.Text
  device    String? @db.VarChar(255)
  location  String? @db.VarChar(255)

  lastActivityAt DateTime @default(now())
  expiresAt      DateTime

  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

// Multi-tenancy Models
model Tenant {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(255)
  slug        String  @unique @db.VarChar(100)
  logo        String? @db.Text
  description String? @db.Text

  ownerId String
  status  TenantStatus @default(ACTIVE)

  // Billing
  stripeCustomerId String? @unique
  subscriptionId   String? @unique

  // Settings
  settings Json? @db.JsonB
  metadata Json? @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  owner        User               @relation(fields: [ownerId], references: [id])
  members      TenantMember[]
  subscription Subscription?      @relation(fields: [subscriptionId], references: [id])
  projects     Project[]
  invitations  TenantInvitation[]

  // Indexes
  @@index([slug])
  @@index([ownerId])
  @@index([status])
  @@map("tenants")
}

model TenantMember {
  id       String           @id @default(cuid())
  tenantId String
  userId   String
  role     TenantMemberRole @default(MEMBER)

  joinedAt    DateTime @default(now())
  invitedById String?

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([tenantId, userId])
  @@index([tenantId])
  @@index([userId])
  @@map("tenant_members")
}

model TenantInvitation {
  id       String           @id @default(cuid())
  tenantId String
  email    String           @db.VarChar(255)
  role     TenantMemberRole @default(MEMBER)
  token    String           @unique

  invitedById String
  expiresAt   DateTime
  acceptedAt  DateTime?

  createdAt DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([token])
  @@index([email])
  @@index([tenantId])
  @@map("tenant_invitations")
}

// Billing Models
model Subscription {
  id               String             @id
  userId           String
  tenantId         String?            @unique
  stripeCustomerId String
  stripePriceId    String
  stripeProductId  String
  status           SubscriptionStatus

  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?
  trialEnd           DateTime?

  metadata Json? @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  tenant       Tenant?
  invoices     Invoice[]
  usageRecords UsageRecord[]

  // Indexes
  @@index([userId])
  @@index([status])
  @@index([stripeCustomerId])
  @@map("subscriptions")
}

model Invoice {
  id              String @id @default(cuid())
  subscriptionId  String
  stripeInvoiceId String @unique
  customerId      String

  amount   Int
  currency String        @db.VarChar(3)
  status   InvoiceStatus

  periodStart DateTime
  periodEnd   DateTime
  paidAt      DateTime?

  hostedInvoiceUrl String? @db.Text
  invoicePdf       String? @db.Text

  metadata Json? @db.JsonB

  createdAt DateTime @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  // Indexes
  @@index([subscriptionId])
  @@index([status])
  @@index([customerId])
  @@map("invoices")
}

model UsageRecord {
  id             String @id @default(cuid())
  subscriptionId String

  quantity  Int
  timestamp DateTime
  action    String   @db.VarChar(100)

  metadata Json? @db.JsonB

  createdAt DateTime @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  // Indexes
  @@index([subscriptionId])
  @@index([timestamp])
  @@index([action])
  @@map("usage_records")
}

// Feature Management
model Plan {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  slug        String  @unique @db.VarChar(50)
  description String? @db.Text

  stripePriceId   String? @unique
  stripeProductId String?

  price    Int // in cents
  currency String @default("usd") @db.VarChar(3)
  interval String @default("month") @db.VarChar(20)

  trialDays Int     @default(0)
  active    Boolean @default(true)
  popular   Boolean @default(false)

  metadata Json? @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  features PlanFeature[]

  // Indexes
  @@index([slug])
  @@index([active])
  @@map("plans")
}

model Feature {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  key         String  @unique @db.VarChar(50)
  description String? @db.Text
  category    String? @db.VarChar(50)

  metadata Json? @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  plans        PlanFeature[]
  featureUsage FeatureUsage[]

  // Indexes
  @@index([key])
  @@index([category])
  @@map("features")
}

model PlanFeature {
  id        String @id @default(cuid())
  planId    String
  featureId String

  included   Boolean @default(true)
  limitValue Int? // For numeric limits (e.g., max projects)

  metadata Json? @db.JsonB

  // Relations
  plan    Plan    @relation(fields: [planId], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([planId, featureId])
  @@index([planId])
  @@index([featureId])
  @@map("plan_features")
}

model FeatureUsage {
  id        String  @id @default(cuid())
  userId    String
  featureId String
  tenantId  String?

  count      Int      @default(1)
  lastUsedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  feature Feature @relation(fields: [featureId], references: [id])

  // Indexes
  @@index([userId])
  @@index([featureId])
  @@index([tenantId])
  @@index([lastUsedAt])
  @@map("feature_usage")
}

// API Usage Tracking
model ApiUsage {
  id       String  @id @default(cuid())
  userId   String
  tenantId String?

  endpoint     String @db.VarChar(255)
  method       String @db.VarChar(10)
  statusCode   Int
  responseTime Int // in milliseconds

  ipAddress String? @db.VarChar(45)
  userAgent String? @db.Text

  metadata Json? @db.JsonB

  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  // Indexes
  @@index([userId])
  @@index([tenantId])
  @@index([endpoint])
  @@index([createdAt])
  @@map("api_usage")
}

// Project Model (Example business entity)
model Project {
  id       String  @id @default(cuid())
  userId   String
  tenantId String?

  name        String  @db.VarChar(255)
  description String? @db.Text
  slug        String  @unique

  settings Json? @db.JsonB
  metadata Json? @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  tenant Tenant? @relation(fields: [tenantId], references: [id])

  // Indexes
  @@index([userId])
  @@index([tenantId])
  @@index([slug])
  @@map("projects")
}

model Notification {
  id     String           @id @default(cuid())
  userId String
  type   NotificationType

  title   String @db.VarChar(255)
  content String @db.Text

  readAt DateTime?
  sentAt DateTime?

  metadata Json? @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId, readAt])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

model AuditLog {
  id     String  @id @default(cuid())
  userId String?

  action   String  @db.VarChar(100)
  entity   String  @db.VarChar(100)
  entityId String? @db.VarChar(255)

  oldValues Json? @db.JsonB
  newValues Json? @db.JsonB

  ipAddress String? @db.VarChar(45)
  userAgent String? @db.Text

  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([userId])
  @@index([entity, entityId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model File {
  id     String  @id @default(cuid())
  userId String?

  filename     String @db.VarChar(255)
  originalName String @db.VarChar(255)
  mimeType     String @db.VarChar(100)
  size         Int

  storage String  @db.VarChar(50)
  path    String  @db.Text
  url     String? @db.Text

  metadata Json? @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  user              User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  ticketAttachments TicketAttachment[]

  // Indexes
  @@index([userId])
  @@index([createdAt])
  @@map("files")
}

model Job {
  id String @id @default(cuid())

  queue  String    @db.VarChar(100)
  name   String    @db.VarChar(100)
  status JobStatus @default(PENDING)

  data   Json  @db.JsonB
  result Json? @db.JsonB
  error  Json? @db.JsonB

  attempts    Int @default(0)
  maxAttempts Int @default(3)

  scheduledFor DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  failedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes
  @@index([queue, status])
  @@index([scheduledFor])
  @@index([createdAt])
  @@map("jobs")
}

model Setting {
  id          String  @id @default(cuid())
  key         String  @unique @db.VarChar(255)
  value       Json    @db.JsonB
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes
  @@index([key])
  @@map("settings")
}

model AnalyticsEvent {
  id       String  @id @default(cuid())
  userId   String?
  tenantId String?

  event      String @db.VarChar(100)
  properties Json?  @db.JsonB

  sessionId String? @db.VarChar(100)
  deviceId  String? @db.VarChar(100)

  ipAddress String? @db.VarChar(45)
  userAgent String? @db.Text
  referrer  String? @db.Text

  utmSource   String? @db.VarChar(100)
  utmMedium   String? @db.VarChar(100)
  utmCampaign String? @db.VarChar(100)
  utmTerm     String? @db.VarChar(100)
  utmContent  String? @db.VarChar(100)

  timestamp DateTime @default(now())

  @@index([userId])
  @@index([tenantId])
  @@index([event])
  @@index([timestamp])
  @@index([sessionId])
  @@map("analytics_events")
}

// ========================= WEBHOOKS =========================

model WebhookEndpoint {
  id       String  @id @default(cuid())
  userId   String
  tenantId String?

  url         String   @db.Text
  events      String[]
  description String?  @db.Text
  secret      String   @db.VarChar(255)
  enabled     Boolean  @default(true)
  headers     Json?    @db.JsonB
  metadata    Json?    @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  deliveries WebhookDelivery[]

  @@index([userId])
  @@index([tenantId])
  @@index([enabled])
  @@map("webhook_endpoints")
}

model WebhookEvent {
  id        String   @id @default(cuid())
  eventType String   @db.VarChar(100)
  payload   Json     @db.JsonB
  createdAt DateTime @default(now())

  deliveries WebhookDelivery[]

  @@index([eventType])
  @@index([createdAt])
  @@map("webhook_events")
}

enum WebhookDeliveryStatus {
  PENDING
  SUCCESS
  FAILED
}

model WebhookDelivery {
  id                String @id @default(cuid())
  webhookEndpointId String
  eventId           String

  eventType String @db.VarChar(100)
  payload   Json   @db.JsonB

  status     WebhookDeliveryStatus @default(PENDING)
  statusCode Int?
  error      String?               @db.Text
  response   Json?                 @db.JsonB

  attemptNumber Int  @default(1)
  duration      Int? // in milliseconds

  createdAt DateTime  @default(now())
  retriedAt DateTime?

  webhookEndpoint WebhookEndpoint @relation(fields: [webhookEndpointId], references: [id])
  event           WebhookEvent?   @relation(fields: [eventId], references: [id])

  @@index([webhookEndpointId])
  @@index([eventId])
  @@index([status])
  @@index([createdAt])
  @@map("webhook_deliveries")
}

// ========================= USER ONBOARDING =========================

enum OnboardingStatus {
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum OnboardingStepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

model OnboardingFlow {
  id             String @id @default(cuid())
  userId         String
  flowTemplateId String @db.VarChar(100)

  status  OnboardingStatus @default(IN_PROGRESS)
  context Json?            @db.JsonB

  totalSteps     Int
  completedSteps Int     @default(0)
  allowSkip      Boolean @default(true)

  startedAt   DateTime  @default(now())
  completedAt DateTime?
  skippedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  steps OnboardingStep[]

  @@index([userId])
  @@index([status])
  @@map("onboarding_flows")
}

model OnboardingStep {
  id     String @id @default(cuid())
  flowId String
  stepId String @db.VarChar(100)

  title       String  @db.VarChar(255)
  description String? @db.Text
  type        String  @db.VarChar(50)
  order       Int
  required    Boolean @default(false)

  status         OnboardingStepStatus @default(PENDING)
  content        Json?                @db.JsonB
  action         Json?                @db.JsonB
  completionData Json?                @db.JsonB
  metadata       Json?                @db.JsonB

  startedAt   DateTime?
  completedAt DateTime?
  skippedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  flow OnboardingFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId])
  @@index([status])
  @@map("onboarding_steps")
}

model OnboardingProgress {
  flowId                 String  @id
  totalSteps             Int
  completedSteps         Int
  skippedSteps           Int
  requiredSteps          Int
  requiredCompleted      Int
  percentComplete        Int
  isComplete             Boolean
  estimatedTimeRemaining Int // in minutes
}

// ========================= TICKET SYSTEM =========================

// Enums for Support Ticket System
enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  WAITING_AGENT
  RESOLVED
  CLOSED
  CANCELLED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum TicketType {
  QUESTION
  PROBLEM
  FEATURE_REQUEST
  BUG_REPORT
  BILLING
  ACCOUNT
  OTHER
}

// Support Ticket Models
model TicketCategory {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  slug        String  @unique @db.VarChar(50)
  description String? @db.Text
  icon        String? @db.VarChar(50)
  color       String? @db.VarChar(7)
  sortOrder   Int     @default(0)
  active      Boolean @default(true)

  parentId String?
  parent   TicketCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children TicketCategory[] @relation("CategoryHierarchy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tickets Ticket[]

  // Indexes
  @@index([slug])
  @@index([parentId])
  @@map("ticket_categories")
}

model Ticket {
  id       String  @id @default(cuid())
  number   String  @unique @db.VarChar(20) // Format: TICK-YYYYMMDD-XXXX
  userId   String
  tenantId String?

  subject     String         @db.VarChar(255)
  description String         @db.Text
  type        TicketType     @default(QUESTION)
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)

  categoryId String?
  category   TicketCategory? @relation(fields: [categoryId], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id])

  // Customer satisfaction
  rating          Int?      @db.SmallInt
  ratingComment   String?   @db.Text
  ratingCreatedAt DateTime?

  // SLA tracking
  firstResponseAt  DateTime?
  firstResponseSla Int? // in minutes
  resolutionAt     DateTime?
  resolutionSla    Int? // in minutes
  slaBreached      Boolean   @default(false)

  // Metadata
  source    String? @db.VarChar(50) // email, web, api, chat
  ipAddress String? @db.VarChar(45)
  userAgent String? @db.Text
  metadata  Json?   @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  closedAt  DateTime?
  deletedAt DateTime?

  // Relations
  user        User               @relation("UserTickets", fields: [userId], references: [id])
  messages    TicketMessage[]
  attachments TicketAttachment[]
  tags        TicketTag[]        @relation("TicketTags")
  history     TicketHistory[]
  watchers    TicketWatcher[]

  // Indexes
  @@index([number])
  @@index([userId])
  @@index([tenantId])
  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([categoryId])
  @@index([createdAt])
  @@map("tickets")
}

model TicketMessage {
  id       String  @id @default(cuid())
  ticketId String
  userId   String
  content  String  @db.Text
  internal Boolean @default(false) // Internal notes not visible to customer

  // For system messages
  isSystem   Boolean @default(false)
  systemType String? @db.VarChar(50) // status_change, assignment_change, etc.

  metadata Json? @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editedAt  DateTime?
  deletedAt DateTime?

  // Relations
  ticket      Ticket             @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id])
  attachments TicketAttachment[]

  // Indexes
  @@index([ticketId])
  @@index([userId])
  @@index([createdAt])
  @@map("ticket_messages")
}

model TicketAttachment {
  id        String  @id @default(cuid())
  ticketId  String
  messageId String?
  userId    String
  fileId    String

  filename String @db.VarChar(255)
  size     Int
  mimeType String @db.VarChar(100)
  url      String @db.Text

  createdAt DateTime @default(now())

  // Relations
  ticket  Ticket         @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  message TicketMessage? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id])
  file    File           @relation(fields: [fileId], references: [id])

  // Constraints
  @@unique([ticketId, fileId])
  @@index([ticketId])
  @@index([messageId])
  @@map("ticket_attachments")
}

model TicketTag {
  id    String @id @default(cuid())
  name  String @unique @db.VarChar(50)
  slug  String @unique @db.VarChar(50)
  color String @default("#6B7280") @db.VarChar(7)

  createdAt DateTime @default(now())

  // Relations
  tickets Ticket[] @relation("TicketTags")

  // Indexes
  @@index([slug])
  @@map("ticket_tags")
}

model TicketHistory {
  id       String @id @default(cuid())
  ticketId String
  userId   String
  action   String @db.VarChar(100) // created, updated, status_changed, assigned, etc.

  field    String? @db.VarChar(50)
  oldValue String? @db.Text
  newValue String? @db.Text
  metadata Json?   @db.JsonB

  createdAt DateTime @default(now())

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  // Indexes
  @@index([ticketId])
  @@index([action])
  @@index([createdAt])
  @@map("ticket_history")
}

model TicketWatcher {
  id       String @id @default(cuid())
  ticketId String
  userId   String

  createdAt DateTime @default(now())

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  // Constraints
  @@unique([ticketId, userId])
  @@index([ticketId])
  @@index([userId])
  @@map("ticket_watchers")
}

model TicketTemplate {
  id          String          @id @default(cuid())
  name        String          @db.VarChar(100)
  slug        String          @unique @db.VarChar(50)
  description String?         @db.Text
  subject     String          @db.VarChar(255)
  content     String          @db.Text
  categoryId  String?
  type        TicketType?
  priority    TicketPriority?
  active      Boolean         @default(true)

  metadata Json? @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes
  @@index([slug])
  @@map("ticket_templates")
}
