generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum AuthProvider {
  LOCAL
  GOOGLE
  GITHUB
  FACEBOOK
  TWITTER
}

enum TokenType {
  ACCESS
  REFRESH
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Models
model User {
  id                String           @id @default(cuid())
  email             String           @unique @db.VarChar(255)
  username          String?          @unique @db.VarChar(50)
  password          String?          @db.VarChar(255)

  firstName         String?          @db.VarChar(100)
  lastName          String?          @db.VarChar(100)
  displayName       String?          @db.VarChar(100)
  avatar            String?          @db.Text
  bio               String?          @db.Text

  role              UserRole         @default(USER)
  status            UserStatus       @default(ACTIVE)

  emailVerified     Boolean          @default(false)
  emailVerifiedAt   DateTime?

  twoFactorEnabled  Boolean          @default(false)
  twoFactorSecret   String?          @db.VarChar(255)

  lastLoginAt       DateTime?
  lastLoginIp       String?          @db.VarChar(45)
  loginCount        Int              @default(0)

  metadata          Json?            @db.JsonB
  preferences       Json?            @db.JsonB

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?

  // Relations
  authProviders     AuthProvider[]
  tokens            Token[]
  sessions          Session[]
  notifications     Notification[]
  auditLogs         AuditLog[]
  files             File[]

  // Indexes
  @@index([email])
  @@index([username])
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

model AuthProvider {
  id                String           @id @default(cuid())
  userId            String
  provider          AuthProvider
  providerId        String           @db.VarChar(255)
  providerEmail     String?          @db.VarChar(255)
  accessToken       String?          @db.Text
  refreshToken      String?          @db.Text
  expiresAt         DateTime?
  metadata          Json?            @db.JsonB

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([provider, providerId])
  @@index([userId])
  @@map("auth_providers")
}

model Token {
  id                String           @id @default(cuid())
  userId            String?
  type              TokenType
  token             String           @unique @db.VarChar(500)
  expiresAt         DateTime
  usedAt            DateTime?
  metadata          Json?            @db.JsonB

  createdAt         DateTime         @default(now())

  // Relations
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([token])
  @@index([userId, type])
  @@index([expiresAt])
  @@map("tokens")
}

model Session {
  id                String           @id @default(cuid())
  userId            String
  token             String           @unique @db.VarChar(500)

  ipAddress         String?          @db.VarChar(45)
  userAgent         String?          @db.Text
  device            String?          @db.VarChar(255)
  location          String?          @db.VarChar(255)

  lastActivityAt    DateTime         @default(now())
  expiresAt         DateTime

  createdAt         DateTime         @default(now())

  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Notification {
  id                String           @id @default(cuid())
  userId            String
  type              NotificationType

  title             String           @db.VarChar(255)
  content           String           @db.Text

  readAt            DateTime?
  sentAt            DateTime?

  metadata          Json?            @db.JsonB

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId, readAt])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

model AuditLog {
  id                String           @id @default(cuid())
  userId            String?

  action            String           @db.VarChar(100)
  entity            String           @db.VarChar(100)
  entityId          String?          @db.VarChar(255)

  oldValues         Json?            @db.JsonB
  newValues         Json?            @db.JsonB

  ipAddress         String?          @db.VarChar(45)
  userAgent         String?          @db.Text

  createdAt         DateTime         @default(now())

  // Relations
  user              User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([userId])
  @@index([entity, entityId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model File {
  id                String           @id @default(cuid())
  userId            String?

  filename          String           @db.VarChar(255)
  originalName      String           @db.VarChar(255)
  mimeType          String           @db.VarChar(100)
  size              Int

  storage           String           @db.VarChar(50)
  path              String           @db.Text
  url               String?          @db.Text

  metadata          Json?            @db.JsonB

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?

  // Relations
  user              User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([userId])
  @@index([createdAt])
  @@map("files")
}

model Job {
  id                String           @id @default(cuid())

  queue             String           @db.VarChar(100)
  name              String           @db.VarChar(100)
  status            JobStatus        @default(PENDING)

  data              Json             @db.JsonB
  result            Json?            @db.JsonB
  error             Json?            @db.JsonB

  attempts          Int              @default(0)
  maxAttempts       Int              @default(3)

  scheduledFor      DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  failedAt          DateTime?

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Indexes
  @@index([queue, status])
  @@index([scheduledFor])
  @@index([createdAt])
  @@map("jobs")
}

model Setting {
  id                String           @id @default(cuid())
  key               String           @unique @db.VarChar(255)
  value             Json             @db.JsonB
  description       String?          @db.Text

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Indexes
  @@index([key])
  @@map("settings")
}
